{"version":3,"sources":["axios/axios-simple-blog.ts","store/actions/blog.ts","store/actions/actionTypes.ts","containers/PostList/PostList.tsx","components/CommentsComponent/CommentsComponent.tsx","components/UI/Button/Button.tsx","components/Post/Post.tsx","containers/PostPage/PostPage.tsx","form/formFramework.ts","store/actions/create.ts","components/UI/Input/Input.tsx","containers/PostCreator/PostCreator.tsx","components/UI/Backdrop/Backdrop.tsx","components/Navigation/Drawer/Drawer.tsx","components/Navigation/MenuToggle/MenuToggle.tsx","hoc/Layout/Layout.tsx","App.tsx","serviceWorker.ts","store/reducers/blog.ts","store/reducers/create.ts","store/configureStore.ts","index.tsx"],"names":["axios","create","baseURL","fetchPostsStart","type","fetchPostsSuccess","posts","fetchPostsError","e","error","fetchPostSuccess","post","deletePostSuccess","postId","fetchPosts","dispatch","a","get","response","data","fetchPostById","console","log","deletePost","history","delete","push","PostList","renderPosts","props","map","ListItem","key","id","ListLink","to","title","this","content","loaded","length","List","Spinner","color","height","width","PostListWrapper","InnerWrapper","PostListTitle","Component","styled","div","h1","ul","li","NavLink","Loader","connect","state","ownProps","blog","bindActionCreators","CommentsContainer","CommentsComponent","comments","comment","renderComments","CustomButton","button","Button","onClick","className","disabled","children","Post","deletePostHandler","event","preventDefault","PostWrapper","PostTitle","PostBody","body","React","h3","p","PostPage","match","params","postContent","Wrapper","PostPageTitle","createControl","config","validation","valid","touched","value","validateForm","formControls","isFormValid","control","hasOwnProperty","savePostInStore","item","resetPostCreation","finishCreatePost","getState","isInvalid","shouldValidate","InputWrapper","Label","label","CustomInput","input","ErrorMsg","span","Input","inputType","htmlFor","Math","random","errorMessage","onChange","createFormControls","required","PostCreator","submitHandler","createPostHandler","setState","changeHandler","controlName","isValid","trim","validate","titleControl","bodyControl","target","PostCreatorWrapper","PostCreatorTitle","Form","onSubmit","renderControls","form","Container","Backdrop","Drawer","clickHandler","onClose","renderLinks","links","link","index","NavListItem","NavListLink","exact","activeClassName","Nav","isOpen","NavList","nav","ToogleIcon","i","MenuToggle","cls","join","onToggle","Layout","menu","toggleMenuHandler","menuCloseHandler","MainWrapper","main","withRouter","routes","path","component","Boolean","window","location","hostname","initialState","loading","rootReducer","combineReducers","action","filter","store","createStore","applyMiddleware","thunk","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e81c1e06.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport default axios.create({\r\n    baseURL: 'https://simple-blog-api.crew.red/',\r\n});\r\n","import {\r\n    FETCH_POSTS_START,\r\n    FETCH_POSTS_SUCCESS,\r\n    FETCH_POSTS_ERROR,\r\n    FETCH_POST_SUCCESS,\r\n    DELETE_POST,\r\n} from './actionTypes';\r\n\r\nimport axios from '../../axios/axios-simple-blog';\r\nimport { AppActions } from '../../types/actions';\r\nimport { Dispatch } from 'redux';\r\n\r\nexport const fetchPostsStart = (): AppActions => ({\r\n    type: FETCH_POSTS_START,\r\n});\r\n\r\nexport const fetchPostsSuccess = (posts: any): AppActions => ({\r\n    type: FETCH_POSTS_SUCCESS,\r\n    posts,\r\n});\r\n\r\nexport const fetchPostsError = (e: any): AppActions => ({\r\n    type: FETCH_POSTS_ERROR,\r\n    error: e,\r\n});\r\n\r\nexport const fetchPostSuccess = (post: any): AppActions => ({\r\n    type: FETCH_POST_SUCCESS,\r\n    post,\r\n});\r\n\r\nexport const deletePostSuccess = (postId: any): AppActions => ({\r\n    postId,\r\n    type: DELETE_POST,\r\n});\r\n\r\nexport function fetchPosts() {\r\n    return async (dispatch: Dispatch<AppActions>) => {\r\n        dispatch(fetchPostsStart());\r\n        try {\r\n            const response = await axios.get('/posts');\r\n\r\n            const posts = [...response.data];\r\n\r\n            dispatch(fetchPostsSuccess(posts));\r\n        } catch (e) {\r\n            dispatch(fetchPostsError(e));\r\n        }\r\n    };\r\n}\r\n\r\n// --------------------------------------\r\n\r\nexport function fetchPostById(postId: any) {\r\n    return async (dispatch: Dispatch<AppActions>) => {\r\n        dispatch(fetchPostsStart());\r\n        try {\r\n            const response = await axios.get(`/posts/${postId}?_embed=comments`);\r\n            const post = response.data;\r\n\r\n            console.log(post);\r\n            dispatch(fetchPostSuccess(post));\r\n        } catch (e) {\r\n            dispatch(fetchPostsError(e));\r\n        }\r\n    };\r\n}\r\n\r\nexport function deletePost(postId: any, history: any) {\r\n    return async (dispatch: Dispatch<AppActions>) => {\r\n        dispatch(fetchPostsStart());\r\n        try {\r\n            await axios.delete(`/posts/${postId}`);\r\n            dispatch(deletePostSuccess(postId));\r\n            history.push('/');\r\n        } catch (e) {\r\n            dispatch(fetchPostsError(e));\r\n        }\r\n    };\r\n}\r\n","export const FETCH_POSTS_START = 'FETCH_POSTS_START';\r\nexport const FETCH_POSTS_SUCCESS = 'FETCH_POSTS_SUCCESS';\r\nexport const FETCH_POSTS_ERROR = 'FETCH_POSTS_ERROR';\r\n\r\nexport const FETCH_POST_SUCCESS = 'FETCH_POST_SUCCESS';\r\n\r\nexport const SAVE_POST_IN_STORE = 'SAVE_POST_IN_STORE';\r\nexport const RESET_POST_CREATION = 'RESET_POST_CREATION';\r\n\r\nexport const DELETE_POST = 'DELETE_POST';\r\n","import React, { Component } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { fetchPosts } from '../../store/actions/blog';\r\nimport styled from 'styled-components';\r\nimport { AppState } from '../../store/configureStore';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport { AppActions } from '../../types/actions';\r\nimport Loader from 'react-loader-spinner';\r\nimport { bindActionCreators } from 'redux';\r\n\r\ninterface PostListProps {\r\n    id?: any;\r\n    title?: string;\r\n    loaded?: boolean;\r\n    posts?: [];\r\n    post?: [];\r\n}\r\n\r\ntype Props = PostListProps & LinkStateProps & LinkDispatchProps;\r\n\r\nclass PostList extends Component<Props, {}> {\r\n    renderPosts = () => {\r\n        return this.props.posts.map((post: PostListProps) => {\r\n            return (\r\n                <ListItem key={post.id}>\r\n                    <ListLink to={'/post/' + post.id}>{post.title}</ListLink>\r\n                </ListItem>\r\n            );\r\n        });\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.props.fetchPosts();\r\n    }\r\n\r\n    render() {\r\n        const content =\r\n            this.props.loaded && this.props.posts.length !== 0 ? (\r\n                <List>{this.renderPosts()}</List>\r\n            ) : (\r\n                <Spinner type=\"Puff\" color=\"#00BFFF\" height={100} width={100} />\r\n            );\r\n        return (\r\n            <PostListWrapper>\r\n                <InnerWrapper>\r\n                    <PostListTitle>List of latest post</PostListTitle>\r\n                    {content}\r\n                </InnerWrapper>\r\n            </PostListWrapper>\r\n        );\r\n    }\r\n}\r\n\r\ninterface LinkStateProps {\r\n    posts: any;\r\n    loaded: any;\r\n}\r\n\r\ninterface LinkDispatchProps {\r\n    fetchPosts: () => void;\r\n}\r\n\r\nconst mapStateToProps = (state: AppState, ownProps: PostListProps): LinkStateProps => ({\r\n    posts: state.blog.posts,\r\n    loaded: state.blog.loaded,\r\n});\r\n\r\nconst mapDispatchToProps = (\r\n    dispatch: ThunkDispatch<any, any, AppActions>,\r\n    ownProps: PostListProps,\r\n): LinkDispatchProps => ({\r\n    fetchPosts: bindActionCreators(fetchPosts, dispatch),\r\n});\r\n\r\nconst PostListWrapper = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    padding-top: 100px;\r\n    flex-grow: 1;\r\n    width: 100%;\r\n    background: linear-gradient(90deg, #fd8355 0%, #f0576c 37%, #f79cbd 100%);\r\n`;\r\n\r\nconst InnerWrapper = styled.div`\r\n    text-align: center;\r\n    width: 800px;\r\n    padding: 15px;\r\n    box-shadow: 0px 0px 10px #000000c2;\r\n    background: #ffffff1f;\r\n    height: 80vh;\r\n    overflow: auto;\r\n`;\r\n\r\nconst PostListTitle = styled.h1`\r\n    color: #fff;\r\n`;\r\n\r\nconst List = styled.ul`\r\n    list-style: none;\r\n    padding: 0;\r\n    margin: 0;\r\n`;\r\n\r\nconst ListItem = styled.li`\r\n    margin-bottom: 10px;\r\n`;\r\n\r\nconst ListLink = styled(NavLink)`\r\n    text-decoration: none;\r\n    color: #fff;\r\n    &:hover {\r\n        color: #363f54;\r\n    }\r\n`;\r\n\r\nconst Spinner = styled(Loader)`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 400px;\r\n`;\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PostList);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface CommentsComponentProps {\r\n    comments: string[];\r\n}\r\n\r\nconst CommentsComponent = (props: CommentsComponentProps) => {\r\n    const renderComments = () => {\r\n        if (props.comments && props.comments.length !== 0) {\r\n            props.comments.map((comment, id) => {\r\n                return (\r\n                    <>\r\n                        <hr />\r\n                        <p key={id}>{comment}</p>\r\n                        <hr />\r\n                    </>\r\n                );\r\n            });\r\n        } else {\r\n            return <div>no comments</div>;\r\n        }\r\n    };\r\n    return <CommentsContainer>{renderComments()}</CommentsContainer>;\r\n};\r\n\r\nconst CommentsContainer = styled.div`\r\n    background: #ffffff7a;\r\n    height: 40vh;\r\n    margin: 50px;\r\n    padding: 10px;\r\n    overflow: auto;\r\n`;\r\n\r\nexport default CommentsComponent;\r\n","import React, { ReactNode } from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface ButtonProps {\r\n    type?: any;\r\n    disabled?: boolean;\r\n    children: ReactNode;\r\n    onClick(event: React.MouseEvent<HTMLElement>): void;\r\n}\r\n\r\nconst Button = (props: ButtonProps) => {\r\n    return (\r\n        <CustomButton onClick={props.onClick} className={props.type} disabled={props.disabled}>\r\n            {props.children}\r\n        </CustomButton>\r\n    );\r\n};\r\n\r\nconst CustomButton = styled.button`\r\n    display: inline-block;\r\n    padding: 10px 20px;\r\n    border-radius: 4px;\r\n    border: 1px solid #ccc;\r\n    color: #000;\r\n    margin-right: 15px;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    font-size: 12px;\r\n    &:focus {\r\n        outline: none;\r\n    }\r\n    &:active {\r\n        box-shadow: inset 2px 2px 1px rgba(0, 0, 0, 0.3);\r\n    }\r\n    &.error {\r\n        background: rgba(240, 87, 108, 1);\r\n    }\r\n    &.success {\r\n        background: rgba(161, 240, 69, 1);\r\n    }\r\n    &.primary {\r\n        background: #2884f6;\r\n        color: #fff;\r\n    }\r\n    &:disabled {\r\n        background: #ccc;\r\n        color: #000;\r\n        cursor: not-allowed;\r\n    }\r\n`;\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport CommentsComponent from '../../components/CommentsComponent/CommentsComponent';\r\nimport Button from '../UI/Button/Button';\r\nimport { deletePost } from '../../store/actions/blog';\r\nimport { connect } from 'react-redux';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport { AppActions } from '../../types/actions';\r\nimport { bindActionCreators } from 'redux';\r\nimport styled from 'styled-components';\r\n\r\ninterface PostProps {\r\n    post?: any;\r\n    title?: string;\r\n    history: any;\r\n}\r\n\r\ntype Props = PostProps & LinkDispatchProps;\r\n\r\nclass Post extends React.Component<Props, {}> {\r\n    deletePostHandler = (event: React.MouseEvent<HTMLElement>) => {\r\n        event.preventDefault();\r\n\r\n        this.props.deletePost(this.props.post.id, this.props.history);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <PostWrapper>\r\n                <PostTitle>{this.props.post.title}</PostTitle>\r\n                <PostBody>{this.props.post.body}</PostBody>\r\n                <Button type=\"success\" onClick={this.deletePostHandler}>\r\n                    Delete post\r\n                </Button>\r\n\r\n                <CommentsComponent comments={this.props.post.comments} />\r\n            </PostWrapper>\r\n        );\r\n    }\r\n}\r\n\r\ninterface LinkDispatchProps {\r\n    deletePost: (id: any, history: any) => void;\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: ThunkDispatch<any, any, AppActions>, ownProps: PostProps): LinkDispatchProps => ({\r\n    deletePost: bindActionCreators(deletePost, dispatch),\r\n});\r\n\r\nconst PostWrapper = styled.div``;\r\n\r\nconst PostTitle = styled.h3`\r\n    text-align: center;\r\n`;\r\n\r\nconst PostBody = styled.p`\r\n    margin-bottom: 20px;\r\n`;\r\n\r\nexport default connect(null, mapDispatchToProps)(Post);\r\n","import React, { Component } from 'react';\r\nimport { fetchPostById } from '../../store/actions/blog';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { AppState } from '../../store/configureStore';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport { AppActions } from '../../types/actions';\r\nimport { bindActionCreators } from 'redux';\r\nimport Post from '../../components/Post/Post';\r\n\r\nimport { History, LocationState } from 'history';\r\nimport Loader from 'react-loader-spinner';\r\n\r\ninterface PostPageProps {\r\n    id?: any;\r\n    title?: string;\r\n    loaded?: boolean;\r\n    posts?: [];\r\n    post?: [];\r\n    match: any;\r\n    history: History<LocationState>;\r\n}\r\ntype Props = PostPageProps & LinkStateProps & LinkDispatchProps;\r\n\r\nclass PostPage extends Component<Props, {}> {\r\n    componentDidMount() {\r\n        this.props.fetchPostById(this.props.match.params.id);\r\n    }\r\n\r\n    render() {\r\n        const postContent = this.props.loaded ? (\r\n            <Post history={this.props.history} post={this.props.post} />\r\n        ) : (\r\n            <Spinner type=\"Puff\" color=\"#00BFFF\" height={100} width={100} />\r\n        );\r\n\r\n        return (\r\n            <PostWrapper>\r\n                <Wrapper>\r\n                    <PostPageTitle>Post</PostPageTitle>\r\n                    {postContent}\r\n                </Wrapper>\r\n            </PostWrapper>\r\n        );\r\n    }\r\n}\r\n\r\ninterface LinkStateProps {\r\n    loaded: any;\r\n    post: any;\r\n}\r\n\r\ninterface LinkDispatchProps {\r\n    fetchPostById: (id: any) => void;\r\n}\r\n\r\nconst mapStateToProps = (state: AppState, ownProps: PostPageProps): LinkStateProps => ({\r\n    loaded: state.blog.loaded,\r\n    post: state.blog.post,\r\n});\r\n\r\nconst mapDispatchToProps = (\r\n    dispatch: ThunkDispatch<any, any, AppActions>,\r\n    ownProps: PostPageProps,\r\n): LinkDispatchProps => ({\r\n    fetchPostById: bindActionCreators(fetchPostById, dispatch),\r\n});\r\n\r\nconst Wrapper = styled.div`\r\n    width: 800px;\r\n    padding: 15px;\r\n    box-shadow: 0px 0px 10px #000000c2;\r\n    background: #ffffff1f;\r\n    height: 80vh;\r\n    overflow: auto;\r\n`;\r\n\r\nconst PostWrapper = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    padding-top: 100px;\r\n    flex-grow: 1;\r\n    width: 100%;\r\n    background: linear-gradient(90deg, #5041b2 0%, #7969e6 100%);\r\n`;\r\n\r\nconst PostPageTitle = styled.h1`\r\n    color: #fff;\r\n    margin-left: 10px;\r\n    text-align: center;\r\n`;\r\n\r\nconst Spinner = styled(Loader)`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 400px;\r\n`;\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PostPage);\r\n","export function createControl(config: any, validation: object) {\r\n    return {\r\n        ...config,\r\n        validation,\r\n        valid: !validation,\r\n        touched: false,\r\n        value: '',\r\n    };\r\n}\r\n\r\nexport function validate(value: any, validation: any = null) {\r\n    if (!validation) {\r\n        return true;\r\n    }\r\n\r\n    let isValid = true;\r\n\r\n    if (validation.required) {\r\n        isValid = value.trim() !== '' && isValid;\r\n    }\r\n\r\n    return isValid;\r\n}\r\n\r\nexport function validateForm(formControls: any) {\r\n    let isFormValid = true;\r\n\r\n    for (const control in formControls) {\r\n        if (formControls.hasOwnProperty(control)) {\r\n            isFormValid = formControls[control].valid && isFormValid;\r\n        }\r\n    }\r\n\r\n    return isFormValid;\r\n}\r\n","import { SAVE_POST_IN_STORE, RESET_POST_CREATION } from './actionTypes';\r\nimport axios from '../../axios/axios-simple-blog';\r\nimport { AppActions } from '../../types/actions';\r\nimport { Dispatch } from 'redux';\r\nimport { AppState } from '../configureStore';\r\n\r\nexport const savePostInStore = (item: any): AppActions => ({\r\n    type: SAVE_POST_IN_STORE,\r\n    item,\r\n});\r\n\r\nexport const resetPostCreation = (): AppActions => ({\r\n    type: RESET_POST_CREATION,\r\n});\r\n\r\nexport function finishCreatePost() {\r\n    return async (dispatch: Dispatch<AppActions>, getState: () => AppState) => {\r\n        await axios.post('/posts', getState().create.post);\r\n        dispatch(resetPostCreation());\r\n    };\r\n}\r\n","import React, { ReactNode } from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface InputProps {\r\n    onChange(event: React.ChangeEvent<HTMLInputElement>): void;\r\n    type?: any;\r\n    value: string;\r\n    errorMessage: string;\r\n    valid: boolean;\r\n    touched: boolean;\r\n    shouldValidate: boolean;\r\n    label: string;\r\n}\r\n\r\nfunction isInvalid({ valid, touched, shouldValidate }: { valid: boolean; touched: boolean; shouldValidate: boolean }) {\r\n    return !valid && shouldValidate && touched;\r\n}\r\n\r\nconst Input = (props: InputProps) => {\r\n    const inputType = props.type || 'text';\r\n    const htmlFor = `${inputType}-${Math.random()}`;\r\n\r\n    const errorMessage = isInvalid(props) ? (\r\n        <ErrorMsg>{props.errorMessage || 'Введите верное значение'}</ErrorMsg>\r\n    ) : null;\r\n    return (\r\n        <InputWrapper>\r\n            <Label className={isInvalid(props) ? 'invalid' : ' '} htmlFor={htmlFor}>\r\n                {props.label}\r\n            </Label>\r\n            <CustomInput type={inputType} id={htmlFor} value={props.value} onChange={props.onChange} />\r\n            {errorMessage}\r\n        </InputWrapper>\r\n    );\r\n};\r\n\r\nconst InputWrapper = styled.div`\r\n    margin-bottom: 15px;\r\n`;\r\n\r\nconst Label = styled.label`\r\n    margin-bottom: 3px;\r\n    padding: 0;\r\n    display: block;\r\n    font-weight: bold;\r\n    &.invalid {\r\n        color: #f01f30;\r\n    }\r\n`;\r\n\r\nconst CustomInput = styled.input`\r\n    display: block;\r\n    box-sizing: border-box;\r\n    border: 1px solid #bebebe;\r\n    padding: 7px;\r\n    margin: 0 0 5px;\r\n    width: 100%;\r\n    outline: none;\r\n    transition: all 0.3s ease-in-out;\r\n`;\r\n\r\nconst ErrorMsg = styled.span`\r\n    color: #f01f30;\r\n    font-size: 12px;\r\n    font-weight: bold;\r\n`;\r\n\r\nexport default Input;\r\n","import React, { Component, MouseEvent } from 'react';\r\nimport { createControl, validate, validateForm } from '../../form/formFramework';\r\nimport { connect } from 'react-redux';\r\nimport { finishCreatePost, savePostInStore } from '../../store/actions/create';\r\n\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\n\r\nimport styled from 'styled-components';\r\nimport { AppState } from '../../store/configureStore';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport { AppActions } from '../../types/actions';\r\nimport { bindActionCreators } from 'redux';\r\n\r\ninterface PostCreatorPageState {\r\n    isFormValid: boolean;\r\n    formControls: object;\r\n    onChange?: any;\r\n}\r\n\r\ntype Props = LinkStateProps & LinkDispatchProps;\r\n\r\nfunction createFormControls() {\r\n    return {\r\n        title: createControl(\r\n            {\r\n                label: 'Subject',\r\n                errorMessage: 'Could not be empty',\r\n            },\r\n            { required: true },\r\n        ),\r\n        body: createControl(\r\n            {\r\n                label: 'What you think',\r\n                errorMessage: 'Could not be empty',\r\n            },\r\n            { required: true },\r\n        ),\r\n    };\r\n}\r\n\r\nclass PostCreator extends Component<Props, PostCreatorPageState> {\r\n    state = {\r\n        isFormValid: false,\r\n        formControls: createFormControls(),\r\n    };\r\n\r\n    submitHandler = (event: React.FormEvent) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    createPostHandler = (event: MouseEvent<HTMLButtonElement>) => {\r\n        event.preventDefault();\r\n\r\n        this.setState({\r\n            isFormValid: false,\r\n            formControls: createFormControls(),\r\n        });\r\n        this.props.finishCreatePost();\r\n    };\r\n\r\n    changeHandler = (value: any, controlName: string) => {\r\n        const formControls: any = { ...this.state.formControls };\r\n        const control = { ...formControls[controlName] };\r\n\r\n        control.touched = true;\r\n        control.value = value;\r\n        control.valid = validate(control.value, control.validation);\r\n\r\n        formControls[controlName] = control;\r\n\r\n        this.setState({\r\n            formControls,\r\n            isFormValid: validateForm(formControls),\r\n        });\r\n\r\n        this.props.savePostInStore({ value, controlName });\r\n    };\r\n\r\n    renderControls() {\r\n        const titleControl = this.state.formControls.title;\r\n        const bodyControl = this.state.formControls.body;\r\n\r\n        return (\r\n            <>\r\n                <Input\r\n                    label={titleControl.label}\r\n                    value={titleControl.value}\r\n                    valid={titleControl.valid}\r\n                    shouldValidate={!!titleControl.validation}\r\n                    touched={titleControl.touched}\r\n                    errorMessage={titleControl.errorMessage}\r\n                    onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\r\n                        this.changeHandler(event.target.value, 'title')\r\n                    }\r\n                />\r\n                <Input\r\n                    label={bodyControl.label}\r\n                    value={bodyControl.value}\r\n                    valid={bodyControl.valid}\r\n                    shouldValidate={!!bodyControl.validation}\r\n                    touched={bodyControl.touched}\r\n                    errorMessage={bodyControl.errorMessage}\r\n                    onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\r\n                        this.changeHandler(event.target.value, 'body')\r\n                    }\r\n                />\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Wrapper>\r\n                <PostCreatorWrapper>\r\n                    <PostCreatorTitle>Post creation</PostCreatorTitle>\r\n\r\n                    <Form onSubmit={this.submitHandler}>\r\n                        {this.renderControls()}\r\n\r\n                        <Button\r\n                            type=\"success\"\r\n                            onClick={this.createPostHandler}\r\n                            disabled={this.props.post.title.length === 0 || this.props.post.body.length === 0}\r\n                        >\r\n                            Create post\r\n                        </Button>\r\n                    </Form>\r\n                </PostCreatorWrapper>\r\n            </Wrapper>\r\n        );\r\n    }\r\n}\r\n\r\ninterface LinkStateProps {\r\n    post: any;\r\n}\r\n\r\ninterface LinkDispatchProps {\r\n    finishCreatePost: () => void;\r\n    savePostInStore: (val: object) => void;\r\n}\r\n\r\nconst mapStateToProps = (state: AppState, ownProps: {}): LinkStateProps => ({\r\n    post: state.create.post,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: ThunkDispatch<any, any, AppActions>, ownProps: {}): LinkDispatchProps => ({\r\n    finishCreatePost: bindActionCreators(finishCreatePost, dispatch),\r\n    savePostInStore: bindActionCreators(savePostInStore, dispatch),\r\n});\r\n\r\nconst Wrapper = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    padding-top: 20px;\r\n    flex-grow: 1;\r\n    width: 100%;\r\n    background: linear-gradient(270deg, #f0613c 0%, #f0783c 100%);\r\n`;\r\n\r\nconst PostCreatorWrapper = styled.div`\r\n    display: flex;\r\n    justify-content: end;\r\n    padding-top: 20px;\r\n    flex-grow: 1;\r\n    width: 100%;\r\n    background: linear-gradient(270deg, #f0613c 0%, #f0783c 100%);\r\n    flex-direction: column;\r\n`;\r\n\r\nconst PostCreatorTitle = styled.h1`\r\n    text-align: center;\r\n`;\r\n\r\nconst Form = styled.form`\r\n    text-align: center;\r\n    width: 80%;\r\n    margin: 0 auto;\r\n`;\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PostCreator);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface BackdropProps {\r\n    onClick?: () => void;\r\n}\r\n\r\nconst Backdrop = (props: BackdropProps) => <Container onClick={props.onClick} />;\r\n\r\nconst Container = styled.h1`\r\n    z-index: 50;\r\n    background: rgba(0, 0, 0, 0.7);\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    bottom: 0;\r\n    right: 0;\r\n    margin: 0;\r\n`;\r\n\r\nexport default Backdrop;\r\n","import React, { Component } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport Backdrop from '../../UI/Backdrop/Backdrop';\r\nimport styled from 'styled-components';\r\n\r\ninterface DrawerProps {\r\n    onClose: () => void;\r\n    isOpen: boolean;\r\n}\r\n\r\ninterface DrawerLinksProps {\r\n    to: string;\r\n    exact: boolean;\r\n    label: string;\r\n}\r\n\r\nclass Drawer extends Component<DrawerProps> {\r\n    clickHandler = () => {\r\n        this.props.onClose();\r\n    };\r\n\r\n    renderLinks = (links: DrawerLinksProps[]) => {\r\n        return links.map((link, index) => {\r\n            return (\r\n                <NavListItem key={index}>\r\n                    <NavListLink to={link.to} exact={link.exact} activeClassName={'active'} onClick={this.clickHandler}>\r\n                        {link.label}\r\n                    </NavListLink>\r\n                </NavListItem>\r\n            );\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const links: DrawerLinksProps[] = [\r\n            { to: '/', label: 'Post List', exact: true },\r\n            { to: '/post-creator', label: 'Create post', exact: false },\r\n        ];\r\n\r\n        return (\r\n            <>\r\n                <Nav className={!this.props.isOpen ? 'close' : ' '}>\r\n                    <NavList>{this.renderLinks(links)}</NavList>\r\n                </Nav>\r\n                {this.props.isOpen ? <Backdrop onClick={this.props.onClose} /> : null}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst Nav = styled.nav`\r\n    position: fixed;\r\n    left: 0;\r\n    top: 0;\r\n    bottom: 0;\r\n    width: 80%;\r\n    max-width: 300px;\r\n    padding: 20px 10px;\r\n    box-sizing: border-box;\r\n    background: #fff;\r\n    z-index: 90;\r\n    transform: translateX(0px);\r\n    transition: transform 0.22s ease-in;\r\n    &.close {\r\n        transform: translateX(-300px);\r\n    }\r\n`;\r\n\r\nconst NavList = styled.ul`\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n`;\r\n\r\nconst NavListItem = styled.li`\r\n    margin-bottom: 15px;\r\n`;\r\n\r\nconst NavListLink = styled(NavLink)`\r\n    color: #363f54;\r\n    font-size: 30px;\r\n    text-decoration: none;\r\n    background-color: #fff;\r\n    position: relative;\r\n    padding: 0 20px 10px 20px;\r\n    transition: opacity 0.3s;\r\n    &:hover {\r\n        color: #363f54;\r\n        font-size: 30px;\r\n        text-decoration: none;\r\n        background-color: #fff;\r\n        position: relative;\r\n        padding: 0 20px 10px 20px;\r\n        opacity: 0.7;\r\n    }\r\n`;\r\n\r\nexport default Drawer;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface MenuToggleProps {\r\n    onToggle: () => void;\r\n    isOpen: boolean;\r\n}\r\n\r\nconst MenuToggle = (props: MenuToggleProps) => {\r\n    const cls = ['fa'];\r\n\r\n    if (props.isOpen) {\r\n        cls.push('fa-times');\r\n        cls.push('open');\r\n    } else {\r\n        cls.push('fa-bars');\r\n    }\r\n\r\n    return <ToogleIcon className={cls.join(' ')} onClick={props.onToggle} />;\r\n};\r\n\r\nconst ToogleIcon = styled.i`\r\n    position: fixed;\r\n    top: 40px;\r\n    left: 40px;\r\n    cursor: pointer;\r\n    color: #fff;\r\n    z-index: 100;\r\n    font-size: 20px;\r\n    transition: opacity, left, 0.22s ease-in;\r\n    &:hover {\r\n        opacity: 0.7;\r\n    }\r\n    &.open {\r\n        left: 320px;\r\n    }\r\n`;\r\n\r\nexport default MenuToggle;\r\n","import React, { Component, ReactNode } from 'react';\r\nimport Drawer from '../../components/Navigation/Drawer/Drawer';\r\nimport MenuToggle from '../../components/Navigation/MenuToggle/MenuToggle';\r\nimport styled from 'styled-components';\r\n\r\ntype Props = {\r\n    children: ReactNode;\r\n};\r\n\r\nclass Layout extends Component<Props> {\r\n    state = {\r\n        menu: false,\r\n    };\r\n\r\n    toggleMenuHandler = () => {\r\n        this.setState({\r\n            menu: !this.state.menu,\r\n        });\r\n    };\r\n\r\n    menuCloseHandler = () => {\r\n        this.setState({\r\n            menu: false,\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Wrapper>\r\n                <Drawer isOpen={this.state.menu} onClose={this.menuCloseHandler} />\r\n\r\n                <MenuToggle onToggle={this.toggleMenuHandler} isOpen={this.state.menu} />\r\n\r\n                <MainWrapper>{this.props.children}</MainWrapper>\r\n            </Wrapper>\r\n        );\r\n    }\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n    height: 100vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n`;\r\n\r\nconst MainWrapper = styled.main`\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex-grow: 1;\r\n`;\r\n\r\nexport default Layout;\r\n","import React from 'react';\nimport { Route, Switch, Redirect, withRouter, RouteComponentProps } from 'react-router-dom';\nimport PostList from './containers/PostList/PostList';\nimport PostPage from './containers/PostPage/PostPage';\nimport PostCreator from './containers/PostCreator/PostCreator';\nimport Layout from './hoc/Layout/Layout';\n\nfunction App({}: RouteComponentProps): JSX.Element {\n    const routes = (\n        <Switch>\n            <Route path=\"/post-creator\" component={PostCreator} />\n            <Route path=\"/post/:id\" component={PostPage} />\n            <Route path=\"/\" exact={true} component={PostList} />\n            <Redirect to={'/'} />\n        </Switch>\n    );\n\n    return <Layout>{routes}</Layout>;\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { Blog } from '../../types/Blog';\r\nimport { BlogActionTypes } from '../../types/actions';\r\n\r\nimport {\r\n    FETCH_POSTS_START,\r\n    FETCH_POSTS_SUCCESS,\r\n    FETCH_POSTS_ERROR,\r\n    FETCH_POST_SUCCESS,\r\n    DELETE_POST,\r\n} from '../actions/actionTypes';\r\n\r\nconst initialState: Blog = {\r\n    posts: [],\r\n    loading: false,\r\n    loaded: false,\r\n    post: [],\r\n    error: '',\r\n};\r\n\r\nconst postsReducer = (state = initialState, action: BlogActionTypes): Blog => {\r\n    switch (action.type) {\r\n        case FETCH_POSTS_START:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n            };\r\n        case FETCH_POSTS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                loaded: true,\r\n                posts: action.posts,\r\n            };\r\n        case FETCH_POSTS_ERROR:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                loaded: false,\r\n                error: action.error,\r\n            };\r\n\r\n        case FETCH_POST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                loaded: true,\r\n                post: action.post,\r\n            };\r\n        case DELETE_POST:\r\n            const posts = [...state.posts].filter(e => e.id !== action.postId);\r\n            console.log(posts);\r\n            return {\r\n                ...state,\r\n                posts,\r\n                post: [],\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport { postsReducer };\r\n","import { Create } from '../../types/Create';\r\nimport { BlogActionTypes } from '../../types/actions';\r\n\r\nimport { SAVE_POST_IN_STORE, RESET_POST_CREATION } from '../actions/actionTypes';\r\n\r\nconst initialState: Create = {\r\n    post: {\r\n        title: '',\r\n        body: '',\r\n    },\r\n};\r\n\r\nconst createReducer = (state = initialState, action: BlogActionTypes): Create => {\r\n    switch (action.type) {\r\n        case SAVE_POST_IN_STORE:\r\n            return {\r\n                ...state,\r\n                post: {\r\n                    body: action.item.controlName === 'body' ? action.item.value : state.post.body,\r\n                    title: action.item.controlName === 'title' ? action.item.value : state.post.title,\r\n                },\r\n            };\r\n        case RESET_POST_CREATION:\r\n            return {\r\n                ...state,\r\n                title: '',\r\n                body: '',\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport { createReducer };\r\n","import { applyMiddleware, combineReducers, createStore } from 'redux';\r\nimport thunk, { ThunkMiddleware } from 'redux-thunk';\r\nimport { postsReducer } from './reducers/blog';\r\nimport { createReducer } from './reducers/create';\r\nimport { AppActions } from '../types/actions';\r\n\r\nexport const rootReducer = combineReducers({\r\n    blog: postsReducer,\r\n    create: createReducer,\r\n});\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk as ThunkMiddleware<AppState, AppActions>));\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { store } from './store/configureStore';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport './index.css';\n\nconst app = (\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}